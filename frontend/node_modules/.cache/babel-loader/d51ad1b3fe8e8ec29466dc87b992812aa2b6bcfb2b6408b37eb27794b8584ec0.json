{"ast":null,"code":"// import React, { useState } from 'react';\n// import { useNavigate, useLocation } from 'react-router-dom';\n// import { useTranslation } from 'react-i18next'; // Import the translation hook\n// import styles from './WithdrawalPage.module.css';\n\n// const WithdrawalPage = () => {\n//   const location = useLocation();\n//   const navigate = useNavigate();\n//   const { t } = useTranslation(); // Initialize translation hook\n//   const user = location.state?.user || {};\n//   const [withdrawalAmount, setWithdrawalAmount] = useState('');\n//   const [error, setError] = useState('');\n\n//   const handleNext = () => {\n//     setError('');\n//     const accountBalance = user?.accountBalance || 10000000;\n\n//     if (!withdrawalAmount || isNaN(withdrawalAmount)) {\n//       setError(t('enterValidAmount'));\n//       return;\n//     }\n\n//     if (withdrawalAmount > accountBalance) {\n//       setError(t('insufficientBalance'));\n//       return;\n//     }\n\n//     navigate('/authentication', { state: { user, total: withdrawalAmount } });\n//   };\n\n//   return (\n//     <div className={styles.container}>\n//       <div className={styles.card}>\n//         <h1 className={styles.title}>{t('withdrawalPageTitle')}</h1>\n//         <p className={styles.subtitle}>\n//           <strong>{t('accountHolder')}</strong> {user.name || t('unknown')}\n//         </p>\n//         <p className={styles.subtitle}>\n//           <strong> {t('accountNumberLabel')}</strong> {user?.account_number || t('unknown')}\n//         </p>\n//         <p className={styles.subtitle}>\n//           <strong>{t('accountBalance')}</strong> ₹{user.accountBalance || 10000000}\n//         </p>\n\n//         <div className={styles.inputContainer}>\n//           <label htmlFor=\"withdrawalAmount\" className={styles.label}>\n//             {t('enterWithdrawalAmount')}\n//           </label>\n//           <input\n//             type=\"number\"\n//             id=\"withdrawalAmount\"\n//             className={styles.input}\n//             value={withdrawalAmount}\n//             onChange={(e) => setWithdrawalAmount(parseFloat(e.target.value))}\n//             placeholder={t('enterWithdrawalAmount')}\n//           />\n//         </div>\n\n//         {error && <p className={styles.error}>{error}</p>}\n\n//         <button onClick={handleNext} className={styles.button}>\n//           {t('nextButton')}\n//         </button>\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default WithdrawalPage;\n\n// import React, { useEffect, useState } from 'react';\n// import { useNavigate, useLocation } from 'react-router-dom';\n// import { useTranslation } from 'react-i18next';\n// import styles from './WithdrawalPage.module.css';\n\n// const WithdrawalPage = () => {\n//   const location = useLocation();\n//   const navigate = useNavigate();\n//   const { t } = useTranslation();\n//   const accountNumber = location.state?.accountNumber; // Pass accountNumber from previous page\n//   const [user, setUser] = useState(null);\n//   const [withdrawalAmount, setWithdrawalAmount] = useState('');\n//   const [error, setError] = useState('');\n//   const [loading, setLoading] = useState(true);\n\n//   // Fetch user details from the backend\n//   useEffect(() => {\n//     const fetchUserDetails = async () => {\n//       try {\n//         const response = await fetch(`/api/user-details/${accountNumber}`);\n//         if (!response.ok) {\n//           throw new Error('Failed to fetch user details');\n//         }\n//         const data = await response.json();\n//         setUser(data);\n//       } catch (error) {\n//         console.error('Error fetching user details:', error.message);\n//         setUser(null);\n//       } finally {\n//         setLoading(false);\n//       }\n//     };\n\n//     if (accountNumber) {\n//       fetchUserDetails();\n//     } else {\n//       setError(t('noAccountNumberProvided'));\n//       setLoading(false);\n//     }\n//   }, [accountNumber, t]);\n\n//   const handleNext = () => {\n//     setError('');\n//     const accountBalance = user?.balance || 0;\n\n//     if (!withdrawalAmount || isNaN(withdrawalAmount)) {\n//       setError(t('enterValidAmount'));\n//       return;\n//     }\n\n//     if (withdrawalAmount > accountBalance) {\n//       setError(t('insufficientBalance'));\n//       return;\n//     }\n\n//     navigate('/authentication', { state: { user, total: withdrawalAmount } });\n//   };\n\n//   if (loading) {\n//     return <p className={styles.loading}>{t('loading')}</p>;\n//   }\n\n//   if (!user) {\n//     return <p className={styles.error}>{t('userNotFound')}</p>;\n//   }\n\n//   return (\n//     <div className={styles.container}>\n//       <div className={styles.card}>\n//         <h1 className={styles.title}>{t('withdrawalPageTitle')}</h1>\n//         <p className={styles.subtitle}>\n//           <strong>{t('accountHolder')}</strong> {user.name || t('unknown')}\n//         </p>\n//         <p className={styles.subtitle}>\n//           <strong>{t('accountNumberLabel')}</strong> {user.account_number || t('unknown')}\n//         </p>\n//         <p className={styles.subtitle}>\n//           <strong>{t('accountBalance')}</strong> ₹{parseFloat(user.balance).toFixed(2) || t('unknown')}\n//         </p>\n\n//         <div className={styles.inputContainer}>\n//           <label htmlFor=\"withdrawalAmount\" className={styles.label}>\n//             {t('enterWithdrawalAmount')}\n//           </label>\n//           <input\n//             type=\"number\"\n//             id=\"withdrawalAmount\"\n//             className={styles.input}\n//             value={withdrawalAmount}\n//             onChange={(e) => setWithdrawalAmount(parseFloat(e.target.value))}\n//             placeholder={t('enterWithdrawalAmount')}\n//           />\n//         </div>\n\n//         {error && <p className={styles.error}>{error}</p>}\n\n//         <button onClick={handleNext} className={styles.button}>\n//           {t('nextButton')}\n//         </button>\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default WithdrawalPage;","map":{"version":3,"names":[],"sources":["C:/Users/91994/Desktop/Challan_Project/frontend/src/pages/WithdrawalPage.jsx"],"sourcesContent":["// import React, { useState } from 'react';\r\n// import { useNavigate, useLocation } from 'react-router-dom';\r\n// import { useTranslation } from 'react-i18next'; // Import the translation hook\r\n// import styles from './WithdrawalPage.module.css';\r\n\r\n// const WithdrawalPage = () => {\r\n//   const location = useLocation();\r\n//   const navigate = useNavigate();\r\n//   const { t } = useTranslation(); // Initialize translation hook\r\n//   const user = location.state?.user || {};\r\n//   const [withdrawalAmount, setWithdrawalAmount] = useState('');\r\n//   const [error, setError] = useState('');\r\n\r\n//   const handleNext = () => {\r\n//     setError('');\r\n//     const accountBalance = user?.accountBalance || 10000000;\r\n\r\n//     if (!withdrawalAmount || isNaN(withdrawalAmount)) {\r\n//       setError(t('enterValidAmount'));\r\n//       return;\r\n//     }\r\n\r\n//     if (withdrawalAmount > accountBalance) {\r\n//       setError(t('insufficientBalance'));\r\n//       return;\r\n//     }\r\n\r\n//     navigate('/authentication', { state: { user, total: withdrawalAmount } });\r\n//   };\r\n\r\n//   return (\r\n//     <div className={styles.container}>\r\n//       <div className={styles.card}>\r\n//         <h1 className={styles.title}>{t('withdrawalPageTitle')}</h1>\r\n//         <p className={styles.subtitle}>\r\n//           <strong>{t('accountHolder')}</strong> {user.name || t('unknown')}\r\n//         </p>\r\n//         <p className={styles.subtitle}>\r\n//           <strong> {t('accountNumberLabel')}</strong> {user?.account_number || t('unknown')}\r\n//         </p>\r\n//         <p className={styles.subtitle}>\r\n//           <strong>{t('accountBalance')}</strong> ₹{user.accountBalance || 10000000}\r\n//         </p>\r\n\r\n//         <div className={styles.inputContainer}>\r\n//           <label htmlFor=\"withdrawalAmount\" className={styles.label}>\r\n//             {t('enterWithdrawalAmount')}\r\n//           </label>\r\n//           <input\r\n//             type=\"number\"\r\n//             id=\"withdrawalAmount\"\r\n//             className={styles.input}\r\n//             value={withdrawalAmount}\r\n//             onChange={(e) => setWithdrawalAmount(parseFloat(e.target.value))}\r\n//             placeholder={t('enterWithdrawalAmount')}\r\n//           />\r\n//         </div>\r\n\r\n//         {error && <p className={styles.error}>{error}</p>}\r\n\r\n//         <button onClick={handleNext} className={styles.button}>\r\n//           {t('nextButton')}\r\n//         </button>\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default WithdrawalPage;\r\n\r\n\r\n// import React, { useEffect, useState } from 'react';\r\n// import { useNavigate, useLocation } from 'react-router-dom';\r\n// import { useTranslation } from 'react-i18next';\r\n// import styles from './WithdrawalPage.module.css';\r\n\r\n// const WithdrawalPage = () => {\r\n//   const location = useLocation();\r\n//   const navigate = useNavigate();\r\n//   const { t } = useTranslation();\r\n//   const accountNumber = location.state?.accountNumber; // Pass accountNumber from previous page\r\n//   const [user, setUser] = useState(null);\r\n//   const [withdrawalAmount, setWithdrawalAmount] = useState('');\r\n//   const [error, setError] = useState('');\r\n//   const [loading, setLoading] = useState(true);\r\n\r\n//   // Fetch user details from the backend\r\n//   useEffect(() => {\r\n//     const fetchUserDetails = async () => {\r\n//       try {\r\n//         const response = await fetch(`/api/user-details/${accountNumber}`);\r\n//         if (!response.ok) {\r\n//           throw new Error('Failed to fetch user details');\r\n//         }\r\n//         const data = await response.json();\r\n//         setUser(data);\r\n//       } catch (error) {\r\n//         console.error('Error fetching user details:', error.message);\r\n//         setUser(null);\r\n//       } finally {\r\n//         setLoading(false);\r\n//       }\r\n//     };\r\n\r\n//     if (accountNumber) {\r\n//       fetchUserDetails();\r\n//     } else {\r\n//       setError(t('noAccountNumberProvided'));\r\n//       setLoading(false);\r\n//     }\r\n//   }, [accountNumber, t]);\r\n\r\n//   const handleNext = () => {\r\n//     setError('');\r\n//     const accountBalance = user?.balance || 0;\r\n\r\n//     if (!withdrawalAmount || isNaN(withdrawalAmount)) {\r\n//       setError(t('enterValidAmount'));\r\n//       return;\r\n//     }\r\n\r\n//     if (withdrawalAmount > accountBalance) {\r\n//       setError(t('insufficientBalance'));\r\n//       return;\r\n//     }\r\n\r\n//     navigate('/authentication', { state: { user, total: withdrawalAmount } });\r\n//   };\r\n\r\n//   if (loading) {\r\n//     return <p className={styles.loading}>{t('loading')}</p>;\r\n//   }\r\n\r\n//   if (!user) {\r\n//     return <p className={styles.error}>{t('userNotFound')}</p>;\r\n//   }\r\n\r\n//   return (\r\n//     <div className={styles.container}>\r\n//       <div className={styles.card}>\r\n//         <h1 className={styles.title}>{t('withdrawalPageTitle')}</h1>\r\n//         <p className={styles.subtitle}>\r\n//           <strong>{t('accountHolder')}</strong> {user.name || t('unknown')}\r\n//         </p>\r\n//         <p className={styles.subtitle}>\r\n//           <strong>{t('accountNumberLabel')}</strong> {user.account_number || t('unknown')}\r\n//         </p>\r\n//         <p className={styles.subtitle}>\r\n//           <strong>{t('accountBalance')}</strong> ₹{parseFloat(user.balance).toFixed(2) || t('unknown')}\r\n//         </p>\r\n\r\n//         <div className={styles.inputContainer}>\r\n//           <label htmlFor=\"withdrawalAmount\" className={styles.label}>\r\n//             {t('enterWithdrawalAmount')}\r\n//           </label>\r\n//           <input\r\n//             type=\"number\"\r\n//             id=\"withdrawalAmount\"\r\n//             className={styles.input}\r\n//             value={withdrawalAmount}\r\n//             onChange={(e) => setWithdrawalAmount(parseFloat(e.target.value))}\r\n//             placeholder={t('enterWithdrawalAmount')}\r\n//           />\r\n//         </div>\r\n\r\n//         {error && <p className={styles.error}>{error}</p>}\r\n\r\n//         <button onClick={handleNext} className={styles.button}>\r\n//           {t('nextButton')}\r\n//         </button>\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default WithdrawalPage;\r\n"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}