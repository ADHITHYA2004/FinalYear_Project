{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\91994\\\\Desktop\\\\Challan_Project\\\\frontend\\\\src\\\\pages\\\\TransactionHistoryPage.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { useLocation } from 'react-router-dom';\nimport styles from './TransactionHistoryPage.module.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TransactionHistoryPage = () => {\n  _s();\n  const location = useLocation();\n  const {\n    accountNumber\n  } = location.state || {}; // Get account number from navigation state\n  const [transactions, setTransactions] = useState([]);\n  const [error, setError] = useState('');\n\n  // useEffect(() => {\n  //   const fetchTransactions = async () => {\n  //     try {\n\n  //       const response = await fetch(`/api/transactions/${accountNumber}`);\n  //       const data = await response.json();\n  //       setTransactions(data);\n  //     } catch (err) {\n  //       setError('Failed to load transactions');\n  //     }\n  //   };\n\n  //   if (accountNumber) fetchTransactions();\n  // }, [accountNumber]);\n\n  // if (!accountNumber) {\n  //   return <div>Error: Account number not provided</div>;\n  // }\n\n  // useEffect(() => {\n  //   const fetchTransactions = async () => {\n  //     try {\n  //       console.log(`Fetching transactions for accountNumber: ${accountNumber}`);\n  //       const response = await fetch(`/api/transactions/${accountNumber}`);\n  //       if (!response.ok) {\n  //         console.error('Fetch failed with status:', response.status);\n  //         throw new Error('Failed to fetch transactions');\n  //       }\n  //       const data = await response.json();\n  //       console.log('Fetched transactions:', data);\n  //       setTransactions(data);\n  //     } catch (err) {\n  //       console.error('Error loading transactions:', err.message);\n  //       setError('Failed to load transactions');\n  //     }\n  //   };\n\n  //   if (accountNumber) fetchTransactions();\n  // }, [accountNumber]);\n\n  // useEffect(() => {\n  //   const fetchTransactions = async () => {\n  //     try {\n  //       console.log(`Fetching transactions for accountNumber: ${accountNumber}`);\n  //       const response = await fetch(`/api/transactions/${accountNumber}`);\n  //       console.log('Response status:', response.status);\n\n  //       if (!response.ok) {\n  //         console.error('Fetch failed with status:', response.status);\n  //         throw new Error('Failed to fetch transactions');\n  //       }\n\n  //       const data = await response.json();\n  //       console.log('Fetched transactions:', data);\n  //       setTransactions(data);\n  //     } catch (err) {\n  //       console.error('Error loading transactions:', err.message);\n  //       setError('Failed to load transactions');\n  //     }\n  //   };\n\n  //   if (accountNumber) fetchTransactions();\n  // }, [accountNumber]);\n\n  // useEffect(() => {\n  //   const fetchTransactions = async () => {\n  //     try {\n  //       console.log(`Fetching transactions for accountNumber: ${accountNumber}`);\n  //       const response = await fetch(`/api/transactions/${accountNumber}`);\n  //       console.log('Raw response:', response);\n\n  //       const responseText = await response.text();\n  //       console.log('Raw response text:', responseText);\n\n  //       if (!response.ok) {\n  //         console.error('Fetch failed with status:', response.status);\n  //         throw new Error('Failed to fetch transactions');\n  //       }\n\n  //       const data = JSON.parse(responseText);\n  //       console.log('Fetched transactions:', data);\n  //       setTransactions(data);\n  //     } catch (err) {\n  //       console.error('Error loading transactions:', err.message);\n  //       setError('Failed to load transactions');\n  //     }\n  //   };\n\n  //   if (accountNumber) fetchTransactions();\n  // }, [accountNumber]);\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles.container,\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Transaction History\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: styles.error,\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 17\n    }, this), !error && transactions.length === 0 && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"No transactions available\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 47\n    }, this), transactions.length > 0 && /*#__PURE__*/_jsxDEV(\"table\", {\n      className: styles.transactionTable,\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Transaction ID\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 115,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Type\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 116,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Amount\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 117,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Date\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 118,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Balance After\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 119,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: transactions.map(transaction => /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"td\", {\n            children: transaction.id\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 125,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: transaction.type\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 126,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: [\"\\u20B9\", transaction.amount]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 127,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: new Date(transaction.date).toLocaleString()\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 128,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: [\"\\u20B9\", transaction.balance_after]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 129,\n            columnNumber: 17\n          }, this)]\n        }, transaction.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 124,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 107,\n    columnNumber: 5\n  }, this);\n};\n_s(TransactionHistoryPage, \"bJ0c603WycnQReKxaYA3GTLVd5w=\", false, function () {\n  return [useLocation];\n});\n_c = TransactionHistoryPage;\nexport default TransactionHistoryPage;\nvar _c;\n$RefreshReg$(_c, \"TransactionHistoryPage\");","map":{"version":3,"names":["React","useEffect","useState","useLocation","styles","jsxDEV","_jsxDEV","TransactionHistoryPage","_s","location","accountNumber","state","transactions","setTransactions","error","setError","className","container","children","fileName","_jsxFileName","lineNumber","columnNumber","length","transactionTable","map","transaction","id","type","amount","Date","date","toLocaleString","balance_after","_c","$RefreshReg$"],"sources":["C:/Users/91994/Desktop/Challan_Project/frontend/src/pages/TransactionHistoryPage.jsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { useLocation } from 'react-router-dom';\r\nimport styles from './TransactionHistoryPage.module.css';\r\n\r\nconst TransactionHistoryPage = () => {\r\n  const location = useLocation();\r\n  const { accountNumber } = location.state || {}; // Get account number from navigation state\r\n  const [transactions, setTransactions] = useState([]);\r\n  const [error, setError] = useState('');\r\n\r\n  // useEffect(() => {\r\n  //   const fetchTransactions = async () => {\r\n  //     try {\r\n        \r\n  //       const response = await fetch(`/api/transactions/${accountNumber}`);\r\n  //       const data = await response.json();\r\n  //       setTransactions(data);\r\n  //     } catch (err) {\r\n  //       setError('Failed to load transactions');\r\n  //     }\r\n  //   };\r\n\r\n  //   if (accountNumber) fetchTransactions();\r\n  // }, [accountNumber]);\r\n\r\n  // if (!accountNumber) {\r\n  //   return <div>Error: Account number not provided</div>;\r\n  // }\r\n\r\n\r\n  // useEffect(() => {\r\n  //   const fetchTransactions = async () => {\r\n  //     try {\r\n  //       console.log(`Fetching transactions for accountNumber: ${accountNumber}`);\r\n  //       const response = await fetch(`/api/transactions/${accountNumber}`);\r\n  //       if (!response.ok) {\r\n  //         console.error('Fetch failed with status:', response.status);\r\n  //         throw new Error('Failed to fetch transactions');\r\n  //       }\r\n  //       const data = await response.json();\r\n  //       console.log('Fetched transactions:', data);\r\n  //       setTransactions(data);\r\n  //     } catch (err) {\r\n  //       console.error('Error loading transactions:', err.message);\r\n  //       setError('Failed to load transactions');\r\n  //     }\r\n  //   };\r\n\r\n  //   if (accountNumber) fetchTransactions();\r\n  // }, [accountNumber]);\r\n  \r\n\r\n  // useEffect(() => {\r\n  //   const fetchTransactions = async () => {\r\n  //     try {\r\n  //       console.log(`Fetching transactions for accountNumber: ${accountNumber}`);\r\n  //       const response = await fetch(`/api/transactions/${accountNumber}`);\r\n  //       console.log('Response status:', response.status);\r\n  \r\n  //       if (!response.ok) {\r\n  //         console.error('Fetch failed with status:', response.status);\r\n  //         throw new Error('Failed to fetch transactions');\r\n  //       }\r\n  \r\n  //       const data = await response.json();\r\n  //       console.log('Fetched transactions:', data);\r\n  //       setTransactions(data);\r\n  //     } catch (err) {\r\n  //       console.error('Error loading transactions:', err.message);\r\n  //       setError('Failed to load transactions');\r\n  //     }\r\n  //   };\r\n  \r\n  //   if (accountNumber) fetchTransactions();\r\n  // }, [accountNumber]);\r\n  \r\n\r\n  // useEffect(() => {\r\n  //   const fetchTransactions = async () => {\r\n  //     try {\r\n  //       console.log(`Fetching transactions for accountNumber: ${accountNumber}`);\r\n  //       const response = await fetch(`/api/transactions/${accountNumber}`);\r\n  //       console.log('Raw response:', response);\r\n  \r\n  //       const responseText = await response.text();\r\n  //       console.log('Raw response text:', responseText);\r\n  \r\n  //       if (!response.ok) {\r\n  //         console.error('Fetch failed with status:', response.status);\r\n  //         throw new Error('Failed to fetch transactions');\r\n  //       }\r\n  \r\n  //       const data = JSON.parse(responseText);\r\n  //       console.log('Fetched transactions:', data);\r\n  //       setTransactions(data);\r\n  //     } catch (err) {\r\n  //       console.error('Error loading transactions:', err.message);\r\n  //       setError('Failed to load transactions');\r\n  //     }\r\n  //   };\r\n  \r\n  //   if (accountNumber) fetchTransactions();\r\n  // }, [accountNumber]);\r\n  \r\n\r\n  return (\r\n    <div className={styles.container}>\r\n      <h1>Transaction History</h1>\r\n      {error && <p className={styles.error}>{error}</p>}\r\n      {!error && transactions.length === 0 && <p>No transactions available</p>}\r\n      {transactions.length > 0 && (\r\n        <table className={styles.transactionTable}>\r\n          <thead>\r\n            <tr>\r\n              <th>Transaction ID</th>\r\n              <th>Type</th>\r\n              <th>Amount</th>\r\n              <th>Date</th>\r\n              <th>Balance After</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {transactions.map((transaction) => (\r\n              <tr key={transaction.id}>\r\n                <td>{transaction.id}</td>\r\n                <td>{transaction.type}</td>\r\n                <td>₹{transaction.amount}</td>\r\n                <td>{new Date(transaction.date).toLocaleString()}</td>\r\n                <td>₹{transaction.balance_after}</td>\r\n              </tr>\r\n            ))}\r\n          </tbody>\r\n        </table>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TransactionHistoryPage;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}